apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

repositories {
    mavenCentral()
}

mainClassName = 'com.github.kaklakariada.proxy.Proxy'
version = '0.0.1'
sourceCompatibility = 1.8

tasks.withType(JavaCompile) {
	options.compilerArgs << '-Xlint:all'
	options.encoding = 'UTF-8'
}

test {
	if(logger.infoEnabled) {
		testLogging.showStandardStreams = true
	}
	jvmArgs '-XX:+HeapDumpOnOutOfMemoryError', '-enableassertions'
}

jar {
	from {
		configurations.compile.collect {
			it.isDirectory() ? it : zipTree(it)
		}
		configurations.runtime.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	manifest { attributes 'Main-Class': 'com.github.kaklakariada.proxy.Proxy' }
}

dependencies {
    compile 'args4j:args4j:2.32'
	compile 'org.slf4j:slf4j-api:1.7.12'
	runtime 'ch.qos.logback:logback-classic:1.1.3'
	compile 'org.littleshoot:littleproxy:1.1.0-beta1'

	testCompile 'junit:junit:4.12'
	testCompile 'org.mockito:mockito-core:1.10.19'
}


eclipse {
	classpath {
		downloadSources = true
		containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		def javaVersion = project.sourceCompatibility.toString()
		def container = "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-$javaVersion"
		logger.info "Using container $container for $project"
		containers container
	}
	jdt.file {
		beforeMerged  { jdt ->
		  File defaultProperties = new File("${rootProject.projectDir}/gradle/defaultEclipseJdtPrefs.properties").absoluteFile
		  logger.info "Load defaults from $defaultProperties for $project"
		  jdt.load(defaultProperties)
		}
	  }
}